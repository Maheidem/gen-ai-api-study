{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simplified Tool Use with LM Studio\n",
    "\n",
    "## The Simple Way\n",
    "\n",
    "No more verbose JSON schemas. Just write functions, use tools.\n",
    "\n",
    "**Before**: ~100 lines of boilerplate per tool  \n",
    "**Now**: ~10 lines per tool"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the package is not installed, run this cell first (uncomment the line below)\n",
    "!pip install -e .."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Setup (3 lines)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import from the new local_llm_sdk package\n",
    "from local_llm_sdk import LocalLLMClient, create_client, ChatMessage, ChatCompletion\n",
    "from local_llm_sdk.tools import builtin  # Built-in tools are auto-registered"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úÖ Client ready: LocalLLMClient(base_url='http://169.254.83.107:1234/v1', model='mistralai/magistral-small-2509', tools=0)\n"
     ]
    }
   ],
   "source": [
    "# Create client with type safety and integrated tools\n",
    "client = LocalLLMClient(\n",
    "    base_url=\"http://169.254.83.107:1234/v1\",\n",
    "    model=\"mistralai/magistral-small-2509\"\n",
    ")\n",
    "\n",
    "# Register all built-in tools\n",
    "client.register_tools_from(builtin)\n",
    "\n",
    "print(f\"‚úÖ Client ready: {client}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. See What Tools Are Available"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üì¶ Available tools:\n",
      "\n",
      "üìã Tool schemas (Pydantic Tool objects):\n"
     ]
    }
   ],
   "source": [
    "# List all registered tools with Pydantic Tool objects\n",
    "print(\"üì¶ Available tools:\")\n",
    "for tool_name in client.tools.list_tools():\n",
    "    print(f\"  ‚Ä¢ {tool_name}\")\n",
    "\n",
    "# View schemas as Pydantic objects\n",
    "print(\"\\nüìã Tool schemas (Pydantic Tool objects):\")\n",
    "for tool in client.tools.get_schemas():\n",
    "    print(f\"\\n{tool.function.name}: {tool.function.description}\")\n",
    "    print(f\"  Type: {tool.type}\")\n",
    "    print(f\"  Parameters: {len(tool.function.parameters.get('properties', {}))} defined\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Simple Chat - The Clean Way"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úÖ Using the unified client - no manual JSON handling!\n"
     ]
    }
   ],
   "source": [
    "# The client handles everything - tool calls, responses, type safety\n",
    "print(\"‚úÖ Using the unified client - no manual JSON handling!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Use All The Tools with Type Safety!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Character counting - client handles all tool execution\n",
    "print(\"üìù Character counting:\")\n",
    "print(client.chat(\"How many characters are in 'Hello, World!'?\"))\n",
    "print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Character counting - client handles all tool execution\n",
    "print(\"üìù Character counting:\")\n",
    "print(client.chat(\"How many characters are in 'Hello, World!'?\"))\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üå§Ô∏è Weather:\n",
      "Let me check the current weather for you. One moment, please.\n",
      "\n",
      "---\n",
      "\n",
      "According to the latest information, the weather in Tokyo is as follows:\n",
      "\n",
      "- Temperature: 23¬∞C (73¬∞F)\n",
      "- Conditions: Partly cloudy\n",
      "- Humidity: 65%\n",
      "- Wind: 10 km/h from the east\n",
      "\n",
      "Would you like more details or a forecast for the coming days?\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Weather (mock) - automatic tool detection\n",
    "print(\"üå§Ô∏è Weather:\")\n",
    "print(client.chat(\"What's the weather in Tokyo?\"))\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üî§ Text transformation:\n",
      "Hello World\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Text transformation - type-safe throughout\n",
    "print(\"üî§ Text transformation:\")\n",
    "print(client.chat(\"Convert 'hello world' to uppercase\"))\n",
    "print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Add a New Tool - Still Simple!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The reversed text is:\n",
      "\n",
      "dlrow olleh\n"
     ]
    }
   ],
   "source": [
    "# Use the new tool immediately with type safety\n",
    "print(client.chat(\"Reverse the text 'hello world'\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Use the new tool immediately with type safety\n",
    "print(client.chat(\"Reverse the text 'hello world'\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Advanced: Get Full ChatCompletion Objects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# For advanced usage, work with full Pydantic models\n",
    "from local_llm_sdk import create_chat_message\n",
    "\n",
    "messages = [\n",
    "    create_chat_message(\"system\", \"You are a helpful assistant.\"),\n",
    "    create_chat_message(\"user\", \"Calculate 100 divided by 7\")\n",
    "]\n",
    "\n",
    "# Get full ChatCompletion response (Pydantic model)\n",
    "response = client.chat(messages, temperature=0.1)\n",
    "\n",
    "print(f\"Response type: {type(response)}\")\n",
    "print(f\"Model used: {response.model}\")\n",
    "print(f\"Tokens used: {response.usage.total_tokens}\")\n",
    "print(f\"Content: {response.choices[0].message.content}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Maintain conversation context with type-safe messages\n",
    "history = []\n",
    "\n",
    "# First query\n",
    "response1, history = client.chat_with_history(\"What is 10 plus 5?\", history)\n",
    "print(f\"Q1: What is 10 plus 5?\")\n",
    "print(f\"A1: {response1}\\n\")\n",
    "\n",
    "# Follow-up query (remembers context)\n",
    "response2, history = client.chat_with_history(\"Now multiply that result by 2\", history)\n",
    "print(f\"Q2: Now multiply that result by 2\")\n",
    "print(f\"A2: {response2}\\n\")\n",
    "\n",
    "print(f\"Conversation history: {len(history)} messages\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Summary: Evolution to Full Type Safety\n",
    "\n",
    "### What We Achieved\n",
    "\n",
    "1. **Integrated `local_llm_sdk`** - Professional Python package structure\n",
    "2. **Created `LocalLLMClient`** - Unified client with type safety\n",
    "3. **Tools return Pydantic objects** - `Tool` and `Function` models\n",
    "4. **Clean interface** - `client.chat()` handles everything\n",
    "\n",
    "### Architecture Now\n",
    "\n",
    "```\n",
    "local_llm_sdk/\n",
    "‚îú‚îÄ‚îÄ models.py     ‚Üí Type definitions (Pydantic)\n",
    "‚îú‚îÄ‚îÄ client.py     ‚Üí LocalLLMClient\n",
    "‚îî‚îÄ‚îÄ tools/\n",
    "    ‚îú‚îÄ‚îÄ registry.py ‚Üí Tool system\n",
    "    ‚îî‚îÄ‚îÄ builtin.py  ‚Üí Built-in tools\n",
    "```\n",
    "\n",
    "### Benefits\n",
    "\n",
    "- **Type Safety**: Pydantic models everywhere\n",
    "- **KISS Principle**: Simple interface, complex internals\n",
    "- **Extensible**: Easy to add tools, models, features\n",
    "- **Production Ready**: Can evolve into full SDK\n",
    "- **IDE Support**: Full autocomplete and type checking\n",
    "\n",
    "### Usage Comparison\n",
    "\n",
    "**Before (100+ lines):**\n",
    "```python\n",
    "# Manual JSON schemas\n",
    "# Manual request building\n",
    "# Manual tool dispatch\n",
    "# No type safety\n",
    "```\n",
    "\n",
    "**Now (3 lines):**\n",
    "```python\n",
    "from local_llm_sdk import LocalLLMClient\n",
    "client = LocalLLMClient(base_url, model)\n",
    "response = client.chat(\"Your query\")  # Type-safe, handles everything\n",
    "```\n",
    "\n",
    "This is a proper foundation for a production Local LLM Python SDK!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Direct tool testing without LLM (for debugging)\n",
    "print(\"Direct tool execution:\")\n",
    "print(f\"char_counter: {client.tools.execute('char_counter', {'text': 'test'})}\")\n",
    "print(f\"math_calculator: {client.tools.execute('math_calculator', {'arg1': 10, 'arg2': 5, 'operation': 'add'})}\")\n",
    "print(f\"reverse_string: {client.tools.execute('reverse_string', {'text': 'hello'})}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "queries = [\n",
    "    \"Calculate 100 divided by 7\",\n",
    "    \"Count characters in 'Python is awesome'\",\n",
    "    \"What's the weather in London?\",\n",
    "    \"Make 'whisper' uppercase\",\n",
    "    \"Reverse 'racecar'\"\n",
    "]\n",
    "\n",
    "for q in queries:\n",
    "    print(f\"Q: {q}\")\n",
    "    print(f\"A: {chat(q)}\")\n",
    "    print(\"-\" * 40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test tools directly\n",
    "print(\"Direct tool execution:\")\n",
    "print(tools.execute(\"char_counter\", {\"text\": \"test\"}))\n",
    "print(tools.execute(\"math_calculator\", {\"arg1\": 10, \"arg2\": 5, \"operation\": \"add\"}))\n",
    "print(tools.execute(\"reverse_string\", {\"text\": \"hello\"}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary: Before vs After\n",
    "\n",
    "### Before (Verbose Approach)\n",
    "```python\n",
    "# 1. Define function\n",
    "def my_tool(param: str) -> dict: ...\n",
    "\n",
    "# 2. Manually write JSON schema (30+ lines)\n",
    "schema = {\n",
    "    \"type\": \"function\",\n",
    "    \"function\": {\n",
    "        \"name\": \"my_tool\",\n",
    "        \"description\": \"...\",\n",
    "        \"parameters\": {\n",
    "            \"type\": \"object\",\n",
    "            \"properties\": {...},\n",
    "            \"required\": [...]\n",
    "        }\n",
    "    }\n",
    "}\n",
    "\n",
    "# 3. Write dispatcher\n",
    "def execute_tool(name, args):\n",
    "    if name == \"my_tool\":\n",
    "        return my_tool(args['param'])\n",
    "    elif name == \"other_tool\":\n",
    "        return other_tool(...)\n",
    "    # ... more if statements\n",
    "```\n",
    "\n",
    "### After (KISS Approach)\n",
    "```python\n",
    "@tool(\"Description\")\n",
    "def my_tool(param: str) -> dict:\n",
    "    return {\"result\": param.upper()}\n",
    "\n",
    "# That's it. Tool is ready.\n",
    "```\n",
    "\n",
    "### Benefits\n",
    "- **70% less code**\n",
    "- **Zero boilerplate**\n",
    "- **Type hints ‚Üí Schema** (automatic)\n",
    "- **No manual dispatch**\n",
    "- **Add tools in seconds**\n",
    "\n",
    "### The KISS Way\n",
    "1. Write function\n",
    "2. Add `@tool` decorator\n",
    "3. Done\n",
    "\n",
    "No JSON. No dispatchers. No repetition. Just tools."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "gen-ai",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
